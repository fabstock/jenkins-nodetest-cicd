/**
 * This Jenkinsfile defines the pipeline stages for building,
 * testing, linting, and deploying the project.
 */
pipeline {
    agent {
        docker {
            image 'node:20.16.0-alpine3.20'
            args '--user=root -m 512m --cpus=1.5'
            reuseNode true
        }
    }
    environment {
        JAVA_HOME = '/usr'
    }
    options {
        ansiColor('xterm')
    }
    stages {
        stage('Load Stages') {
            steps {
                script {
                    cloneRepoStage = load './groovy3/CloneRepoStage.groovy'
                    demoStage = load './groovy3/DemoStage.groovy'
                    cleanStage = load './groovy3/CleanStage.groovy'
                    buildStage = load './groovy3/BuildStage.groovy'
                    groovyLintStage = load './groovy3/GroovyLintStage.groovy'
                    testsStage = load './groovy3/TestsStage.groovy'
                    deployStage = load './groovy3/DeployStage.groovy'
                }
            }
        }

        stage('Clone repository') {
            steps {
                script {
                    cloneRepoStage()
                }
            }
        }

        stage('Demo') {
            steps {
                script {
                    demoStage()
                }
            }
        }

        stage('Clean') {
            steps {
                script {
                    cleanStage()
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    buildStage()
                }
            }
        }

        stage('Groovy-lint Jenkinsfile') {
            steps {
                script {
                    groovyLintStage()
                }
            }
        }

        stage('Tests') {
            steps {
                script {
                    testsStage()
                }
            }
        }

        stage('Deploy') {
            when {
                expression {
                    currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                script {
                    deployStage()
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
